generator client {
  provider = "prisma-client-js"
  output   = "../src/app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String               @id
  name             String
  email            String               @unique
  emailVerified    Boolean              @default(false)
  image            String?
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @default(now()) @updatedAt
  accounts         Account[]
  providerRequests ProviderRequest[]    @relation("UserProviderRequests")
  reviewedRequests ProviderRequest[]    @relation("ReviewedProviderRequests")
  sessions         Session[]
  userRoles        UserRoleAssignment[]

  @@map("user")
}

model Role {
  id        String               @id @default(cuid())
  name      UserRole             @unique
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  userRoles UserRoleAssignment[]

  @@map("role")
}

model UserRoleAssignment {
  id        String   @id @default(cuid())
  userId    String
  roleId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_role_assignment")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model ProviderRequest {
  id             String                @id @default(cuid())
  userId         String
  user           User                  @relation("UserProviderRequests", fields: [userId], references: [id], onDelete: Cascade)
  services       Json?                 // Array of service selections with experience levels
  description    String
  experience     String
  phone          String
  cep            String?               // CEP field for address lookup
  address        String
  documentNumber String
  portfolioLinks String?               // Legacy field - will be migrated to JSON later
  portfolioLinksJson Json?            // New JSON field for portfolio links with titles and URLs
  status         ProviderRequestStatus @default(PENDING)
  rejectionReason String?             // Motivo da rejeição
  reviewedBy     String?
  reviewedByUser User?                 @relation("ReviewedProviderRequests", fields: [reviewedBy], references: [id])
  reviewedAt     DateTime?
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt

  @@map("provider_request")
}

enum UserRole {
  ADMINISTRADOR
  PRESTADOR
  CLIENTE
}

enum ProviderRequestStatus {
  PENDING
  APPROVED
  REJECTED
}
