
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  role: 'role',
  phoneE164: 'phoneE164',
  whatsappId: 'whatsappId',
  cpf: 'cpf',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserRoleAssignmentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  roleId: 'roleId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  expiresAt: 'expiresAt',
  token: 'token',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  userId: 'userId'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  providerId: 'providerId',
  userId: 'userId',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  idToken: 'idToken',
  accessTokenExpiresAt: 'accessTokenExpiresAt',
  refreshTokenExpiresAt: 'refreshTokenExpiresAt',
  scope: 'scope',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VerificationScalarFieldEnum = {
  id: 'id',
  identifier: 'identifier',
  value: 'value',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProviderRequestScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  services: 'services',
  description: 'description',
  experience: 'experience',
  phone: 'phone',
  cep: 'cep',
  address: 'address',
  documentNumber: 'documentNumber',
  portfolioLinks: 'portfolioLinks',
  portfolioLinksJson: 'portfolioLinksJson',
  status: 'status',
  rejectionReason: 'rejectionReason',
  reviewedBy: 'reviewedBy',
  reviewedAt: 'reviewedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AddressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  label: 'label',
  cep: 'cep',
  street: 'street',
  number: 'number',
  complement: 'complement',
  neighborhood: 'neighborhood',
  city: 'city',
  state: 'state',
  lat: 'lat',
  lon: 'lon',
  createdAt: 'createdAt'
};

exports.Prisma.ProviderProfileScalarFieldEnum = {
  userId: 'userId',
  bio: 'bio',
  radiusKm: 'radiusKm',
  avgRating: 'avgRating',
  totalReviews: 'totalReviews',
  acceptRate30d: 'acceptRate30d',
  responseP50S: 'responseP50S',
  noShow30d: 'noShow30d'
};

exports.Prisma.ProviderAvailabilityScalarFieldEnum = {
  id: 'id',
  providerId: 'providerId',
  weekday: 'weekday',
  startTime: 'startTime',
  endTime: 'endTime'
};

exports.Prisma.ProviderCategoryScalarFieldEnum = {
  id: 'id',
  providerId: 'providerId',
  categoryId: 'categoryId',
  minPriceCents: 'minPriceCents',
  active: 'active',
  updatedAt: 'updatedAt',
  levelWeight: 'levelWeight',
  expWeight: 'expWeight',
  score: 'score',
  isAvailable: 'isAvailable'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  active: 'active'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  providerId: 'providerId',
  addressId: 'addressId',
  categoryId: 'categoryId',
  description: 'description',
  status: 'status',
  depositMethod: 'depositMethod',
  depositBaseAvgCents: 'depositBaseAvgCents',
  depositCents: 'depositCents',
  slotStart: 'slotStart',
  slotEnd: 'slotEnd',
  finalPriceCents: 'finalPriceCents',
  reviewStatus: 'reviewStatus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderSlotScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  label: 'label',
  startAt: 'startAt',
  endAt: 'endAt',
  origin: 'origin',
  chosen: 'chosen'
};

exports.Prisma.OrderCategoryScalarFieldEnum = {
  orderId: 'orderId',
  categorySlug: 'categorySlug',
  confidence: 'confidence',
  rank: 'rank'
};

exports.Prisma.OrderInvitationScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  providerId: 'providerId',
  slotId: 'slotId',
  score: 'score',
  sentAt: 'sentAt',
  respondedAt: 'respondedAt',
  response: 'response',
  waMessageId: 'waMessageId',
  waRemoteJid: 'waRemoteJid',
  categorySlug: 'categorySlug',
  status: 'status',
  expiresAt: 'expiresAt',
  meta: 'meta'
};

exports.Prisma.OrderStatusHistoryScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  oldStatus: 'oldStatus',
  newStatus: 'newStatus',
  at: 'at',
  byUserId: 'byUserId'
};

exports.Prisma.OrderReviewScalarFieldEnum = {
  orderId: 'orderId',
  clientId: 'clientId',
  providerId: 'providerId',
  rating: 'rating',
  comment: 'comment',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  kind: 'kind',
  gateway: 'gateway',
  gatewayPaymentId: 'gatewayPaymentId',
  status: 'status',
  amountCents: 'amountCents',
  createdAt: 'createdAt',
  approvedAt: 'approvedAt'
};

exports.Prisma.PaymentEventScalarFieldEnum = {
  id: 'id',
  paymentId: 'paymentId',
  orderId: 'orderId',
  rawPayload: 'rawPayload',
  receivedAt: 'receivedAt',
  signatureOk: 'signatureOk'
};

exports.Prisma.CommissionScalarFieldEnum = {
  orderId: 'orderId',
  finalPriceCents: 'finalPriceCents',
  rateBp: 'rateBp',
  minCents: 'minCents',
  maxCents: 'maxCents',
  computedCents: 'computedCents',
  computedAt: 'computedAt'
};

exports.Prisma.ClientCreditScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  orderId: 'orderId',
  amountCents: 'amountCents',
  expiresAt: 'expiresAt',
  usedCents: 'usedCents',
  createdAt: 'createdAt'
};

exports.Prisma.ProviderPayoutScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  providerId: 'providerId',
  grossCents: 'grossCents',
  commissionCents: 'commissionCents',
  netCents: 'netCents',
  status: 'status',
  paidAt: 'paidAt'
};

exports.Prisma.MatchScoreScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  providerId: 'providerId',
  distanceKm: 'distanceKm',
  ratingNorm: 'ratingNorm',
  acceptRate: 'acceptRate',
  responseFast: 'responseFast',
  reliability: 'reliability',
  finalScore: 'finalScore',
  createdAt: 'createdAt'
};

exports.Prisma.LlmClassificationScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  inputText: 'inputText',
  categoryId: 'categoryId',
  confidence: 'confidence',
  createdAt: 'createdAt'
};

exports.Prisma.RefusalRuleScalarFieldEnum = {
  code: 'code',
  clientCreditPct: 'clientCreditPct',
  providerPct: 'providerPct',
  platformPct: 'platformPct'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  ADMINISTRADOR: 'ADMINISTRADOR',
  PRESTADOR: 'PRESTADOR',
  CLIENTE: 'CLIENTE'
};

exports.ProviderRequestStatus = exports.$Enums.ProviderRequestStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Role: 'Role',
  UserRoleAssignment: 'UserRoleAssignment',
  Session: 'Session',
  Account: 'Account',
  Verification: 'Verification',
  ProviderRequest: 'ProviderRequest',
  Address: 'Address',
  ProviderProfile: 'ProviderProfile',
  ProviderAvailability: 'ProviderAvailability',
  ProviderCategory: 'ProviderCategory',
  Category: 'Category',
  Order: 'Order',
  OrderSlot: 'OrderSlot',
  OrderCategory: 'OrderCategory',
  OrderInvitation: 'OrderInvitation',
  OrderStatusHistory: 'OrderStatusHistory',
  OrderReview: 'OrderReview',
  Payment: 'Payment',
  PaymentEvent: 'PaymentEvent',
  Commission: 'Commission',
  ClientCredit: 'ClientCredit',
  ProviderPayout: 'ProviderPayout',
  MatchScore: 'MatchScore',
  LlmClassification: 'LlmClassification',
  RefusalRule: 'RefusalRule'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
